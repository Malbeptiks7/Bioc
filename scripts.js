// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Three.js –¥–ª—è 3D
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.getElementById('container').appendChild(renderer.domElement);

// –ü—Ä–æ—Å—Ç–æ–π –∫—É–± —Å –Ω–µ–æ–Ω–æ–≤—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 0xff00cc, wireframe: true });
const cube = new THREE.Mesh(geometry, material);
scene.add(cube);

// –î–æ–±–∞–≤–∏–º —Å–≤–µ—Ç –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);
const pointLight = new THREE.PointLight(0x00ffcc, 1, 100);
pointLight.position.set(5, 5, 5);
scene.add(pointLight);

camera.position.z = 5;

function animate() {
    requestAnimationFrame(animate);
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;
    renderer.render(scene, camera);
}
animate();

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –±–∏–æ
function loadPhotos() {
    const photoGrid = document.getElementById('photo-grid');
    if (!photoGrid) return;

    const mainPhotos = [
        { baseName: 'IMG-20250313-002030', alt: '–í–∞–¥–∏–º–∫–æ', caption: '–í–∞–¥–∏–º–∫–æ' },
        { baseName: 'IMG-20250313-001705-949', alt: '–ú–∞–Ω–¥–∞—Ä–∏–Ω', caption: '–ú–∞–Ω–¥–∞—Ä–∏–Ω' },
        { baseName: 'IMG-20250313-001822', alt: '–ê–∫—Ç–∞–≤–∏—É—Å', caption: '–ê–∫—Ç–∞–≤–∏—É—Å' }
    ];

    mainPhotos.forEach(photo => {
        const imgContainer = document.createElement('div');
        imgContainer.className = 'photo-container';
        imgContainer.style.position = 'relative';

        const img = document.createElement('img');
        img.className = 'photo';
        img.alt = photo.alt;
        img.onclick = () => window.open('https://t.me/biochca', '_blank');

        const caption = document.createElement('div');
        caption.className = 'photo-caption';
        caption.textContent = photo.caption;

        const tryExtensions = ['jpg', 'png', 'jpeg'];
        let loaded = false;

        const loadImage = (extIndex = 0) => {
            if (extIndex >= tryExtensions.length) {
                console.warn(`–§–æ—Ç–æ ${photo.baseName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }

            const src = `images/${photo.baseName}.${tryExtensions[extIndex]}`;
            const testImg = new Image();
            testImg.onload = () => {
                if (!loaded) {
                    img.src = src;
                    imgContainer.appendChild(img);
                    imgContainer.appendChild(caption);
                    photoGrid.appendChild(imgContainer);
                    loaded = true;
                }
            };
            testImg.onerror = () => {
                loadImage(extIndex + 1);
            };
            testImg.src = src;
        };

        loadImage();
    });
}

// –õ–µ—Ç–∞—é—â–∏–µ —Ñ–æ—Ç–æ
const floatingImages = [
    '2025031300224134.png', '2025031300224134.png', '2025031300224134.png', // –ú–Ω–æ–≥–æ –∫–æ–ø–∏–π
    '2025031300224134.png', '2025031300224134.png', '2025031300224134.png',
    '2025031300224134.png', '2025031300224134.png', '2025031300224134.png',
    'heart.png', 'leaf.png', 'mandarin-icon.png', 'butterfly.png', 'parallax-bg.jpg',
    'IMG-20250313-002030.jpg', 'IMG-20250313-001822.jpg'
];

function createFloatingImage() {
    const img = document.createElement('img');
    img.className = 'floating-image';
    img.src = `images/${floatingImages[Math.floor(Math.random() * floatingImages.length)]}`;
    img.style.width = Math.random() * 50 + 30 + 'px';
    img.style.left = Math.random() * 80 + 10 + 'vw';
    img.style.animationDelay = Math.random() * 5 + 's';
    document.body.appendChild(img);
    setTimeout(() => img.remove(), 15000);
}
setInterval(createFloatingImage, 500);

// –¢–∞–π–º–µ—Ä—ã
function updateTimers() {
    const now = new Date();
    const newYear = new Date(now.getFullYear(), 11, 31, 23, 59, 59);
    if (now > newYear) newYear.setFullYear(now.getFullYear() + 1);
    const newYearDiff = Math.ceil((newYear - now) / (1000 * 60 * 60 * 24));
    document.getElementById('new-year-days').textContent = newYearDiff;

    const birthday = new Date(now.getFullYear(), 8, 27, 23, 59, 59); // 27 —Å–µ–Ω—Ç—è–±—Ä—è
    if (now > birthday) birthday.setFullYear(now.getFullYear() + 1);
    const birthdayDiff = Math.ceil((birthday - now) / (1000 * 60 * 60 * 24));
    document.getElementById('birthday-days').textContent = birthdayDiff;
}
setInterval(updateTimers, 1000);
updateTimers();

// –ü–ª–µ–π–ª–∏—Å—Ç
const playlist = [
    'song1.mp3',
    'song2.mp3',
    'song3.mp3',
    'song4.mp3'
];
let currentTrackIndex = 0;
const audio = document.getElementById('background-audio');
audio.volume = 0.3;

function updateTrackDisplay() {
    const trackNameElement = document.getElementById('track-name');
    trackNameElement.textContent = playlist[currentTrackIndex];
}

function playCurrentTrack() {
    audio.src = playlist[currentTrackIndex];
    audio.play().then(() => {
        document.querySelector('.play-audio').textContent = '–ü–∞—É–∑–∞';
        updateTrackDisplay();
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª ' + playlist[currentTrackIndex] + ' –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–∏ –∑–≤—É–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!');
    });
}

function toggleAudio() {
    if (audio.paused) {
        playCurrentTrack();
    } else {
        audio.pause();
        document.querySelector('.play-audio').textContent = '–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
    }
}

function nextTrack() {
    currentTrackIndex = (currentTrackIndex + 1) % playlist.length;
    playCurrentTrack();
}

function previousTrack() {
    currentTrackIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length;
    playCurrentTrack();
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
audio.addEventListener('ended', () => {
    nextTrack();
});

// –°–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
const quotes = [
    "–ú–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üçä",
    "–ê–∫—Ç–∞–≤–∏—É—Å –≥–æ–≤–æ—Ä–∏—Ç: –¢—ã –∫—Ä—É—Ç! üí™",
    "–ù–µ–æ–Ω –≤–∞–π–± ‚Äî —ç—Ç–æ –Ω–∞—à —Å—Ç–∏–ª—å! ‚ú®",
    "–í–µ—Ä—å –≤ —Å–µ–±—è, –∫–∞–∫ —è –≤–µ—Ä—é –≤ —Ç–µ–±—è! üòÑ",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üåü",
    "–¢—ã ‚Äî —á–∞—Å—Ç—å –Ω–∞—à–µ–≥–æ –∫—Ä—É—Ç–æ–≥–æ –º–∏—Ä–∞! üöÄ",
    "–£–ª—ã–±–∞–π—Å—è, –∫–∞–∫ –ú–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞! üò∫"
];

function showRandomQuote() {
    const quoteDisplay = document.getElementById('quote-display');
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
    quoteDisplay.textContent = randomQuote;
}

// –≠—Ñ—Ñ–µ–∫—Ç –∏—Å–∫—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ
document.addEventListener('click', (e) => {
    for (let i = 0; i < 8; i++) {
        const spark = document.createElement('div');
        spark.className = 'spark';
        spark.style.left = e.clientX + 'px';
        spark.style.top = e.clientY + 'px';
        const dx = (Math.random() - 0.5) * 80 + 'px';
        const dy = (Math.random() - 0.5) * 80 + 'px';
        spark.style.setProperty('--dx', dx);
        spark.style.setProperty('--dy', dy);
        document.body.appendChild(spark);
        setTimeout(() => spark.remove(), 800);
    }
});

// –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
const greetings = [
    '–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å! üòÑ',
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –í–∞–¥–∏–º–∫–æ! üåü',
    '–ú–∞–Ω–¥–∞—Ä–∏–Ω–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! üçä',
    '–ê–∫—Ç–∞–≤–∏—É—Å –≥–æ–≤–æ—Ä–∏—Ç: "–¢—ã –∫—Ä—É—Ç!" üí™',
    '–ù–µ–æ–Ω –≤–∞–π–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚ú®'
];
function showRandomGreeting() {
    const preview = document.getElementById('greeting-preview');
    const p = document.createElement('p');
    p.textContent = greetings[Math.floor(Math.random() * greetings.length)];
    preview.innerHTML = '';
    preview.appendChild(p);
    preview.classList.add('active');
    setTimeout(() => preview.classList.remove('active'), 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = () => {
    loadPhotos();
    updateTrackDisplay();
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
};